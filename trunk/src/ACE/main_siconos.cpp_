#include"ace.h"
#include "algo.h"

#include "/usr/local/include/Siconos/Kernel/MLCP.h"
#include "SiconosKernel.h"

int main(int argc, char **argv){
  if (argc<5){
    printf("usage : toto file.cir ENUM|SIMPLEX|PATH 10 DENSE|SPARSE\n");
    return 0;
  }
  if (!strcmp(argv[2],"ENUM")){
    ACE_SOLVER_TYPE = ACE_SOLVER_ENUM;
  }else if(!strcmp(argv[2],"SIMPLEX")){
    ACE_SOLVER_TYPE = ACE_SOLVER_SIMPLEX;
  }else if(!strcmp(argv[2],"PATH")){
    ACE_SOLVER_TYPE = ACE_SOLVER_PATH;
  }else{
    printf("usage : toto file.cir ENUM|SIMPLEX|PATH 10\n");
    return 0;
  }
  if (!strcmp(argv[3],"0"))
    ACE_MUET_LEVEL=0;
  else if (!strcmp(argv[3],"1"))
    ACE_MUET_LEVEL=1;
  else if (!strcmp(argv[3],"2"))
    ACE_MUET_LEVEL=2;
  else
    ACE_MUET_LEVEL=10;
  
  if (!strcmp(argv[4],"SPARSE"))
    ACE_MAT_TYPE=SPARSE;
  else
    ACE_MAT_TYPE=DENSE;
    
  ACE_times[ACE_TIMER_MAIN].start();
  ACE_INIT();
  algo *a=new algo(argv[1]);
  a->perform();
  int dimX = a->sls.mDimx;
  int s=a->sls.mB2zs->getDimRow();
  int m=a->sls.mD2l->getDimRow();
  aceVector* X0 = new aceVector(dimX);
  FirstOrderLinearTIDS * aDS = new FirstOrderLinearTIDS(1,*X0,*(a->sls.mA2x),*(a->sls.mA2s));
  cout<<"FirstOrderLinearTIDS with :"<<endl;
  aDS->display();
  DynamicalSystemsSet Inter_DS;
  Inter_DS.insert(aDS);

  aceMatrix* C= new aceMatrix(s+m,dimX);
  aceMatrix* D= new aceMatrix(s+m,s+m);
  aceMatrix* B= new aceMatrix(dimX,s+m);
  C->setBlock(0,0,*(a->sls.mB2x));
  C->setBlock(s,0,*(a->sls.mD2x));
  D->setBlock(0,0,*(a->sls.mB2zs));
  D->setBlock(0,s,*(a->sls.mB2l));
  D->setBlock(s,0,*(a->sls.mD2zs));
  D->setBlock(s,s,*(a->sls.mD2l));
  B->setBlock(0,0,*(a->sls.mA2zs));
  B->setBlock(0,s,*(a->sls.mR));
  aceVector *q= new aceVector(s+m);
  q->setBlock(0,*(a->sls.mB2s));
  q->setBlock(s,*(a->sls.mD2s));
  FirstOrderLinearTIR * aTIR = new FirstOrderLinearTIR(*C,*B);
  aTIR->setD(*D);
  cout<<"FirstOrderLinearTIR with :"<<endl;
  aTIR->display();
  ComplementarityConditionNSL * aNSL = new ComplementarityConditionNSL(m);
  Interaction * aI = new Interaction("MLCP",Inter_DS,1,m+s,aNSL,aTIR);
  NonSmoothDynamicalSystem * aNSDS = new NonSmoothDynamicalSystem(aDS,aI);
  Model * aM = new Model(0,10);
  aM->setNonSmoothDynamicalSystemPtr(aNSDS);
  double h=0.00001;
  TimeDiscretisation * aTD = new TimeDiscretisation(h,aM);
  Simulation *aS = new TimeStepping(aTD);
  Moreau * aMoreau = new Moreau(aDS,0.5,aS);

    // One Step non smooth problem
    IntParameters iparam(5);
    iparam[0] = 1001; // Max number of iteration
    DoubleParameters dparam(5);
    dparam[0] = 0.0001; // Tolerance
    string solverName = "Lemke" ;
    NonSmoothSolver * mySolver = new NonSmoothSolver(solverName,iparam,dparam);

  
  MLCP * aMLCP = new MLCP(aS,mySolver,"MLCP");
  aS->initialize();
  aS->run();
  ACE_times[ACE_TIMER_MAIN].stop();
  ACE_PRINT_TIME();
  return 0;
 
}
