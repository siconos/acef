####################################################################################
# Makefile (configuration file for GNU make - see http://www.gnu.org/software/make/)
#
# Compilation of files written in C/C++ (version 0.5)
#
# Author : Sebastien Varrette <Sebastien.Varrette@imag.fr>
#          Web page : http://www-id.imag.fr/~svarrett/
#
# --------------------------------------------------------------------------------
# This is a generic makefile in the sense that it doesn't require to be 
# modified when adding/removing new source files.
# --------------------------------------------------------------------------------
#
# Documentation on the Makefile utility may be found at 
#                  http://www.gnu.org/software/make/manual/make.html           
# 
# Available Commands  
# ------------------
# make           : Compile files, binary is generated in the current directory  
# make force     : Force the complete re-compilation, even if not needed 
# make clean     : Remove backup files generated by emacs and vi         
# make realclean : Remove all generated files           
# make doc       : Generate Doxygen documentation (in Doc/) see www.doxygen.org 
# make help      : print help message                                          
#
############################## Variables Declarations ##############################
# Name of the executable to generate --- TO BE ADAPTED ---
SYSTEM     = x86_rhel4.0_3.4
LIBFORMAT  = static_pic
CPLEXDIR      = /softs/ilog/cplex102
CONCERTDIR    = /softs/ilog/concert24

# ---------------------------------------------------------------------
# CPLEX Compiler options 
# ---------------------------------------------------------------------

CCOPT = -m32 -O -fPIC -fexceptions -DNDEBUG -DIL_STD
# What does that mean ?
# -c : compile but do not link
# -m32 : ??? (architecture-specific to CRIS = ?)
# -O : level 1 optimization
# -fPIC : generate Position Independent Code (suitable for a shared object)
# -fexceptions : enables exception handling (generates extra code)
# -DNDEBUG : defines symbol "NDEBUG" in preprocessor
# -DIL_STD : defines symbol "NIL_STD" in preprocessor

COPT  = -m32 -fPIC 

# ---------------------------------------------------------------------
# CPLEX Link options and libraries
# ---------------------------------------------------------------------

CPLEXBINDIR   = $(CPLEXDIR)/bin/$(BINDIST)
CPLEXLIBDIR   = $(CPLEXDIR)/lib/$(SYSTEM)/$(LIBFORMAT)
CONCERTLIBDIR = $(CONCERTDIR)/lib/$(SYSTEM)/$(LIBFORMAT)
CCLNFLAGS = -L$(CPLEXLIBDIR) -lilocplex -lcplex -L$(CONCERTLIBDIR) -lconcert -lm -lpthread 
# What does that mean ?
# -L<directory> : add <directory> to include path
# -l<libname> : add <libname> to the set of libraries to link with

CLNFLAGS  = -L$(CPLEXLIBDIR) -lcplex -lm -lpthread 
CONCERTINCDIR = $(CONCERTDIR)/include
CPLEXINCDIR   = $(CPLEXDIR)/include

CFLAGS  = $(COPT)  -I$(CPLEXINCDIR)
CCFLAGS = $(CCOPT) -I$(CPLEXINCDIR) -I$(CONCERTINCDIR) 
JCFLAGS = $(JOPT)





EXE_ACE          = totoAce 
EXE_SICONOS      = totoSiconos
# Directory where header files (.h) and object files (.o) will be placed
INCLUDE_DIR  = includes
INCLUDE_SICONOS_DIR  = /usr/local/include/Siconos/ /usr/local/include/Siconos/Kernel
INCLUDE_SICONOS_KERNEL_DIR  = /usr/local/include/Siconos/Kernel
OBJ_DIR      = Obj
# File entensions for C, C++ and header files
C_EXT        = c
CPP_EXT      = cpp
H_EXT        = h
# Source files
#SRC          = $(wildcard *.$(C_EXT) *.$(CPP_EXT))
SRC          = ace.cpp aceMatrix.cpp acetime.cpp aceVector.cpp algo.cpp componentarb.cpp componentcap.cpp componentcomp.cpp \
 component.cpp componentdio.cpp componentdyn.cpp componentind.cpp componentisrc.cpp componentlinear.cpp componentmos.cpp componentnlinear.cpp \
 componentres.cpp componentvccs.cpp componentvcvs.cpp componentvsrc.cpp equationcap.cpp equation.cpp equationind.cpp equationkcl.cpp \
 equationten.cpp equationvd.cpp graph.cpp linearsystem.cpp mlcp.cpp unknown.cpp

SRC_H        = $(wildcard *.$(H_EXT) $(INCLUDE_DIR)/*.$(H_EXT))
ALL_SRC      = $(SRC) $(SRC_H)
# Check avalibility of source files
ifeq ($(SRC),)
all:
	@echo "No source files available - I can't handle the compilation"
	@echo "Please check the presence and/or extension of source files "
	@echo "(This makefile is configured to manage *.$(C_EXT) or *.$(CPP_EXT) - "\
		"you may modify variables C_EXT and CPP_EXT to reflect your " \
		"own programming style)"
else
# Object files
OBJ          = $(patsubst %.$(C_EXT),%.o,$(SRC:.$(CPP_EXT)=.o))
ABSOBJ       = $(OBJ:%.o=$(OBJ_DIR)/%.o) -L/usr/lib/atlas -L/usr/local/lib -lMlcpSimplex -lSiconosKernel \
-lSiconosNumerics -L/usr/lib -lxml2 -lz -lm -llapack -llapack_atlas -latlas lib/parser.a -ldl $(CLNFLAGS)
# Backup files generated by text editors
BACKUP_FILE  = $(shell find . -name "*~")
# Doxygen stuff 
DOC_DIR      = Doc
DOXYGEN      = $(shell which doxygen)
DOXYGEN_CONF = .doxygen.conf
YES_ATTRIBUTES := JAVADOC_AUTOBRIEF EXTRACT_ALL EXTRACT_PRIVATE EXTRACT_STATIC \
		 SOURCE_BROWSER GENERATE_MAN 
# Compilator configuration
# Detect if you have a C or a C++ project through file extension
ifneq ($(filter %.c,$(SRC)),)
	CXX    = gcc
	YES_ATTRIBUTES := $(YES_ATTRIBUTES) OPTIMIZE_OUTPUT_FOR_C
else 
	CXX    = g++
	SPECIAL_CPP_OPTION = -Wno-deprecated
endif
CXXFLAGS     =  -g -Wall $(SPECIAL_CPP_OPTION) -I$(INCLUDE_DIR) -I$(INCLUDE_SICONOS_DIR) -I$(CPLEXINCDIR) -I$(CONCERTINCDIR) \
			-I$(INCLUDE_SICONOS_KERNEL_DIR) -I/usr/include/libxml2 -I/usr/local/include/Siconos/Numerics \
			-I/usr/local/include/Siconos/Kernel/AtlasLocal/atlas/ -c
ADD_OPT      = #-lntl -lgmp -lm  # Optionnal option for the linker
# Specifies the list of directories that make should search
VPATH        = $(INCLUDE_DIR):$(INCLUDE_SICONOS_DIR):$(OBJ_DIR)
# dependance file used for make rules 
MAKEDEP_FILE = .Makefile.dep
############################### Now starting rules ################################
# Required rule : what's to be done each time 
all :  	$(MAKEDEP_FILE) $(EXE_ACE) $(EXE_SICONOS) TAGS

# Generate TAGS for emacs
TAGS : $(ALL_SRC)
	etags $<
	cp TAGS $(INCLUDE_DIR)/

# Clean Options
clean : 
	@echo "Remove backup files generated by emacs and vi"
	rm -f $(BACKUP_FILE)

# Clean everything (including object files, binaries and documentation) 
realclean : clean 
	@echo "Remove object files"
	rm -f $(ABSOBJ) 
	@echo "Remove generated executable"
	rm -f $(EXE_ACE)
	rm -f $(EXE_SICONOS)
	@if [ ! -z "$(DOC_DIR)" -a ! -z "$(DOXYGEN)" ]; then \
		echo "Remove documentation ('make doc' to regenerate it)"; \
		rm -rf $(DOC_DIR)/*; \
	fi

# Force re-compilation, even if not required 
force :
	touch $(ALL_SRC) $(ABSOBJ)
	@$(MAKE)

# Generate the dependance file
$(MAKEDEP_FILE) : $(ALL_SRC) 
	$(CXX) $(SPECIAL_CPP_OPTION) -MM -I$(INCLUDE_DIR) -I$(INCLUDE_SICONOS_DIR) $(SRC) > $@

include $(MAKEDEP_FILE)

# Generic description for compilation of object files 
%.o : %.$(C_EXT)
	$(CXX) $(CXXFLAGS) $< -o $(OBJ_DIR)/$@ 
%.o : %.$(CPP_EXT)
	$(CXX) $(CXXFLAGS) $< -o $(OBJ_DIR)/$@ 
main.o : main.cpp
	$(CXX) $(CXXFLAGS) $< -o $(OBJ_DIR)/$@ 
mainSiconos.o : mainSiconos.cpp
	$(CXX) $(CXXFLAGS) $< -o $(OBJ_DIR)/$@ 

# Generation of the final binary (see $(EXE))
$(EXE_ACE) : $(OBJ) $(ALL_SRC) main.o
	$(CXX)  -g -o $@ $(ABSOBJ) $(ADD_OPT) $(OBJ_DIR)/main.o
$(EXE_SICONOS) : $(OBJ) $(ALL_SRC) mainSiconos.o
	$(CXX)  -g -o $@ $(ABSOBJ) $(ADD_OPT) $(OBJ_DIR)/mainSiconos.o
	@$(MAKE) help

# Help rule - print help message
help :
	@echo '+-----------------------------------------------------------------------------+'
	@echo '|                             Available Commands                              |'
	@echo '+----------------+------------------------------------------------------------+'
	@echo '| make           | Compile files, binary is generated in the current directory|'
	@echo '| make force     | Force the complete re-compilation, even if not required    |'
	@echo '| make clean     | Remove cache backup files generated by emacs and vi        |'
	@echo '| make realclean | Remove all generated files (including .o and binary)       |'
	@echo '| make doc       | Generate documentation using doxygen (see www.doxygen.org) |'
	@echo '| make help      | Print help message                                         |'
	@echo '+----------------+------------------------------------------------------------+'

# Test values of variables - for debug purpose 
test : 
	@echo "INCLUDE_DIR  = $(INCLUDE_DIR)  $(INCLUDE_SICONOS_DIR) "
	@echo "OBJ_DIR      = $(OBJ_DIR)"
	@echo "EXE_ACE      = $(EXE_ACE)"
	@echo "EXE_SICONOS  = $(EXE_SICONOS)"
	@echo "SRC          = $(SRC)"
	@echo "SRC_H        = $(SRC_H)"
	@echo "ALL_SRC      = $(ALL_SRC)"
	@echo "OBJ          = $(OBJ)"
	@echo "BACKUP_FILE  = $(BACKUP_FILE)"
	@echo "CXX          = $(CXX)"
	@echo "CXXFLAGS     = $(CXXFLAGS)"
	@echo "ADD_OPT      = $(ADD_OPT)"
	@echo "DOC_DIR      = $(DOC_DIR)"
	@echo "DOXYGEN      = $(DOXYGEN)"
	@echo "DOXYGEN_CONF = $(DOXYGEN_CONF)"
	@echo "YES_ATTRIBUTES = $(YES_ATTRIBUTES)"
	@echo "MAKEDEP_FILE = $(MAKEDEP_FILE)"

# Documentation generation through doxygen 
# First check if the $(DOXYGEN) and the $(DOC_DIR) directory exist
# Then Check $(DOXYGEN_CONF) availability;otherwise,generate one with 'doxygen -s -g'
#    The following attributes should be modified in the generated file: 
#    - OUTPUT_DIRECTORY should be set to '$(DOC_DIR)', INPUT to '. $(INCLUDE_DIR)'
#    - $(YES_ATTRIBUTES) attributes should be set to YES
#    - OPTIMIZE_OUTPUT_FOR_C should be set to YES if the project in in C
# Finally, launch documentation generation
doc :
ifeq ($(DOXYGEN),)
	@echo "Please install Doxygen to use this option!"
	@echo "('apt-get install doxygen' under Debian)"
else
	@if [ ! -d ./$(DOC_DIR) ]; then \
		echo "$(DOC_DIR)/ does not exist => creating $(DOC_DIR)/"; \
		mkdir -p ./$(DOC_DIR)/; \
	fi
	@if [ ! -f $(DOXYGEN_CONF) ]; then \
		echo "I don't found the configuration file for Doxygen ($(DOXYGEN_CONF))"; \
		echo "Now generating one using '$(DOXYGEN) -s -g $(DOXYGEN_CONF)'"; \
		$(DOXYGEN) -s -g $(DOXYGEN_CONF); \
		echo "Now updating OUTPUT_DIRECTORY attribute to '$(DOC_DIR)'"; \
		cat $(DOXYGEN_CONF) | sed -e "s/^\(OUTPUT_DIRECTORY \+= \+\).*/\1$(DOC_DIR)/" > $(DOXYGEN_CONF); \
		echo "Now updating INPUT attribute to '. $(INCLUDE_DIR)'"; \
		cat $(DOXYGEN_CONF) | sed -e "s/^\(INPUT \+= \+\).*/\1. $(INCLUDE_DIR)/" > $(DOXYGEN_CONF); \
		for attr in $(YES_ATTRIBUTES); do \
			echo "now updating $$attr to YES"; \
			cat $(DOXYGEN_CONF) | sed -e "s/^\($$attr \+= \+\).*/\1YES/" > $(DOXYGEN_CONF); \
		done; \
	fi
	$(DOXYGEN) $(DOXYGEN_CONF)
	@echo 
	@echo Documentation generated in $(DOC_DIR)/ 
	@echo May be you can try to execute 'mozilla ./$(DOC_DIR)/html/index.html'
endif
endif
