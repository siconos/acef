dnl configure.in script for ngspice
dnl
dnl This file is part of ngspice.
dnl
dnl (Process this file with autoconf to produce a configure script.)
dnl
dnl This configure file has been updated to mostly follow the guidence in the
dnl GNU Autoconf manual for version 2.59


dnl Initialisation
dnl ---------------

dnl Initialisation of configure
AC_INIT(ng-spice-rework,17,ngspice-bugs@lists.sourceforge.net)

dnl Unique file in the source directory
AC_CONFIG_SRCDIR([src/ngspice.c])

dnl Ensure a recent version of Autoconf is in use
dnl Older versions may not work with this script and this will report the
dnl problem to the user.  (2.52 is a guess and might need some adjustment)
AC_PREREQ(2.52)

dnl Revison stamp the generated ./configure script
AC_REVISION($Revision: 1.83 $)

dnl Create a configuration header
AC_CONFIG_HEADERS([config.h])

dnl Initialise automake stuff
AM_INIT_AUTOMAKE

dnl Package Options
dnl ---------------
    
dnl --enable-ansi : try to force --ansi option to the compiler
AC_ARG_ENABLE(ansi,
    AS_HELP_STRING([--enable-ansi],[Force --ansi option for compilation]))

dnl --disable-debug : remove -g and -Wall  option to the compiler
AC_ARG_ENABLE(debug,
    AS_HELP_STRING([--enable-debug],[Add -g option for compilation (default)]))

dnl --enable-checker : add --with-checker-debug  option to the compiler
AC_ARG_ENABLE(checker,
    AS_HELP_STRING([--enable-checkergcc],[Option for compilation with checkergcc]))

dnl --enable-gc : Enable Boehm-Weiser Conservative Garbage Collector
AC_ARG_ENABLE(checker,
    AS_HELP_STRING([--enable-gc],[Use Boehm-Weiser Conservative Garbage Collector. Disabled by default.]))
 
dnl --enable-nosqrt : define NOSQRT for the code
AC_ARG_ENABLE(nosqrt,
    AS_HELP_STRING([--enable-nosqrt],[Use always log/exp for nonlinear capacitances]))
 
dnl --enable-bypass : define BYPASS for the code
AC_ARG_ENABLE(nobypass,
    AS_HELP_STRING([--enable-nobypass],[Don't bypass recalculations of slowly changing variables]))

dnl --enable-capbypass : define CAPBYPASS for the code
AC_ARG_ENABLE(capbypass,
    AS_HELP_STRING([--enable-capbypass],[Bypass calculation of cbd/cbs in the mosfets if the vbs/vbd voltages are unchanged]))

dnl --enable-capzerobypass : define CAPZEROBYPASS for the code
AC_ARG_ENABLE(capzerobypass,
    AS_HELP_STRING([--enable-capzerobypass],[Bypass all the cbd/cbs calculations if Czero is zero]))
 
dnl --enable-nodelimiting : define NODELIMITING for the code
AC_ARG_ENABLE(nodelimiting,
    AS_HELP_STRING([--enable-nodelimiting],[Experimental damping scheme]))
 
dnl --enable-predictor : define PREDICTOR for the code
AC_ARG_ENABLE(predictor,
    AS_HELP_STRING([--enable-predictor],[Enable a predictor method for convergence]))

dnl --enable-newpred   : define PREDICTOR for the code
AC_ARG_ENABLE(newpred,
    AS_HELP_STRING([--enable-newpred],[Enable NEWPRED whatever it is(?)]))

dnl --enable-newtrunc : define NEWTRUNC for the code
AC_ARG_ENABLE(newtrunc,
    AS_HELP_STRING([--enable-newtrunc],[Enable the newtrunc option]))

dnl --enable-sense2 : define WANT_SENSE2 for the code
AC_ARG_ENABLE(sense2,
    AS_HELP_STRING([--enable-sense2],[Use spice2 sensitivity analysis]))

dnl --enable-ftedebug : enable frontend debug macros
AC_ARG_ENABLE(ftedebug,
    AS_HELP_STRING([--enable-ftedebug],[Enable ngspice frontend debug]))

dnl --enable-cpdebug : enable frontend debug macros
AC_ARG_ENABLE(cpdebug,
    AS_HELP_STRING([--enable-cpdebug],[Enable ngspice shell debug]))

dnl --enable-sensdebug : define SENSDEBUG for the code
AC_ARG_ENABLE(sensdebug,
    AS_HELP_STRING([--enable-sensdebug],[Debug sensitivity code *SENSDEBUG*]))

dnl --enable-asdebug : define ASDEBUG for the code
AC_ARG_ENABLE(asdebug,
    AS_HELP_STRING([--enable-asdebug],[Debug sensitivity code *ASDEBUG*]))
        
dnl --enable-stepdebug : define STEPDEBUG for the code
AC_ARG_ENABLE(stepdebug,
    AS_HELP_STRING([--enable-stepdebug],[Unknown debug option]))

dnl --enable-pzdebug   : define PZDEBUG for the code
AC_ARG_ENABLE(pzdebug,
    AS_HELP_STRING([--enable-pzdebug],[Debug pole/zero code]))

dnl --enable-blktmsdebug   : define D_DBG_BLOCKTIMES for the code
AC_ARG_ENABLE(blktmsdebug,
    AS_HELP_STRING([--enable-blktmsdebug],[Debug distortion code *BLOCKTIMES*]))

dnl --enable-smltmsdebug   : define D_DBG_SMALLTIMES for the code
AC_ARG_ENABLE(smltmsdebug,
    AS_HELP_STRING([--enable-smltmsdebug],[Debug distortion code *SMALLTIMES*]))

dnl --enable-intnoise : define INT_NOISE for the code
AC_ARG_ENABLE(intnoise,
    AS_HELP_STRING([--enable-intnoise],[Enable noise integration in noise analysis]))

dnl --enable-smoketest : a smoketest
AC_ARG_ENABLE(smoketest,
    AS_HELP_STRING([--enable-smoketest],[Enable smoketest compile]))

dnl --enable-experimental : define EXPERIMENTAL_CODE for the code
AC_ARG_ENABLE(experimental,
    AS_HELP_STRING([--enable-experimental],[Enable some experimental code]))

dnl --enable-expdevices : Enable the compilation of experimental devices
AC_ARG_ENABLE(expdevices,
    AS_HELP_STRING([--enable-expdevices],[Enable experimental devices (they do not compile)]))

dnl --enable-ekv: define HAVE_EKV in the code. This is for EKV model support
AC_ARG_ENABLE(ekv,
    AS_HELP_STRING([--enable-ekv],[Enable ekv model *not in standard distribution*]))

dnl --enable-xspice: define XSPICE in the code. This is for xspice support
AC_ARG_ENABLE(xspice,
    AS_HELP_STRING([--enable-xspice],[Enable XSpice enhancements, (experimental) ]))

dnl --enable-cider: define CIDER in the code. This is for CIDER support
AC_ARG_ENABLE(cider,
    AS_HELP_STRING([--enable-cider],[Enable CIDER enhancements, (experimental) ]))

dnl --enable-cluster: define CLUSTER in the code. This is for cluster support
AC_ARG_ENABLE(cluster,
    AS_HELP_STRING([--enable-cluster],[Enable cluster support, (experimental) ]))

dnl --enable-numparams: define NUMPARAMS in the code. This is for .param support
AC_ARG_ENABLE(numparam,
    AS_HELP_STRING([--enable-numparam],[Enable numparams library support, (experimental) ]))

dnl --enable-xgraph: Compile the xgraph plotting program. Default is "no".
dnl Xgraph is a plotting package for X11 once very popular.
AC_ARG_ENABLE(xgraph,
    AS_HELP_STRING([--enable-xgraph],[Enable xgraph compilation.]))
 
dnl --with-readline:  Includes GNU readline support into CLI.  Default is "no".
dnl Including readline into ngspice is a violation of GPL license. It's use
dnl is discouraged.
AC_ARG_WITH(readline,
    AS_HELP_STRING([--with-readline[=yes/no]],[Enable GNU readline support for CLI.  Default=no.]))
    
dnl --with-editline:  Includes BSD Editline support into CLI.  Default is "no".
AC_ARG_WITH(editline,
    AS_HELP_STRING([--with-editline[=yes/no]],[Enable BSD editline support for CLI.  Default=no.]))
    
    
dnl readline and editline cannot both be enabled
if test "$with_editline" = "yes"; then
    if test "$with_readline" = "yes"; then
        AC_MSG_ERROR(Readline and editline cannot both be enabled)
    fi
fi
    

dnl --enable-dot-global: Enable use of the .global keyword (experimental)
AC_MSG_CHECKING([whether .gobal keyword has been enabled])
AC_ARG_ENABLE(dot-global,
    AS_HELP_STRING([--enable-dot-global],[Enable use of the .global keyword (experimental)]),
    [if test "$enable_dot_global" = "yes"; then
        AC_DEFINE([GLOBAL_NODE],[1],[Define to enable the .global keyword])
    fi],
    [enable_dot_global="no"])
AC_MSG_RESULT($enable_dot_global)



dnl Enable maintainer commands only if requested
AM_MAINTAINER_MODE


dnl Compiler checks
dnl ---------------

dnl Work on compiler options according to system:
dnl Set default CFLAG - only use -Wall if we have gcc

AC_PROG_CC

dnl the above AC_PROG_CC may set CFLAGS to "-o2 -g"
if test "$enable_debug" = "no"; then
	AC_MSG_WARN(Removing debugging option!)
	CFLAGS=" "
fi

if test "x$GCC" = "xyes"; then
	CFLAGS="$CFLAGS -Wall "
fi


dnl Not sure that this will work....
if test "$with_checkergcc" = "yes"; then
        CC="checkergcc"
fi      


dnl Checks for ANSI-C header files.
AC_HEADER_STDC

if test "$enable_ansi" = "yes"; then
	AC_PROG_CC()
AC_DIAGNOSE([obsolete],[AM_PROG_CC_STDC:
	your code should no longer depend upon `am_cv_prog_cc_stdc', but upon
	`ac_cv_prog_cc_stdc'.  Remove this warning and the assignment when
	you adjust the code.  You can also remove the above call to
	AC_PROG_CC if you already called it elsewhere.])
am_cv_prog_cc_stdc=$ac_cv_prog_cc_stdc

	if test ! "$am_cv_prog_cc_stdc"="yes"; then
	AC_MSG_WARN(Failed to find Ansi flag!)
	fi	
fi

if test "$enable_smoketest" = "yes"; then
dnl	CFLAGS="$CFLAGS -Werror"
	CFLAGS="$CFLAGS -pedantic -W -Wmissing-prototypes"
	CFLAGS="$CFLAGS -Wstrict-prototypes -Wtraditional"
	CFLAGS="$CFLAGS -Wconversion -Wshadow -Wpointer-arith"
	CFLAGS="$CFLAGS -Wcast-qual -Wcast-align -Wwrite-strings"
	CFLAGS="$CFLAGS -Waggregate-return -fshort-enums -fno-common"
	CFLAGS="$CFLAGS -Wnested-externs -Dinline= -g -O4"
fi


dnl Check system we're on , and tune accordingly 
AC_CANONICAL_HOST


dnl Checks for programs

AC_LIBTOOL_DLOPEN
AM_PROG_LIBTOOL
AC_PROG_LIBTOOL

dnl --with-windows : the user wants to use generate the MS WINDOWS executable
AC_MSG_CHECKING([whether windows code is enabled])
AC_ARG_WITH(windows,
    AS_HELP_STRING([--with-windows],[MS WINDOWS executable]),
	[if test "$with_windows" = "yes"; then
    	AC_DEFINE([HAS_WINDOWS],[1],[define to specify MS Windows executable])
    fi],
    [with_windows="no"]
)
AC_MSG_RESULT($with_windows)
AM_CONDITIONAL(WINDOWS, test x$with_windows = xyes)


case $with_windows in

	yes )
		AC_DEFINE(X_DISPLAY_MISSING)
		AC_MSG_RESULT(No X display!)
		CFLAGS="$CFLAGS -mwindows";;
	* )
 

dnl Checks for X11 header files and libraries - X11 support can be disabled
dnl by passing the '--without-x' option to configure:

dnl Try to locate the X-Windows include files and libraries
AC_PATH_X
AC_PATH_XTRA


dnl Checks for X libraries - if X11 wasn't found then don't make following
dnl tests and compile without X11 support - otherwise, check if the following
dnl libraries are present (error if they are not)
dnl In CYGWIN library ordering has to be changed. Is this compatible to LINUX?
dnl XShmAttach is a struct in CYGWIN, not a function
dnl SJB: 13th march 2005
dnl Library order is giving linker warnings on MacOSX
dnl It's not clear to me which order is required for Cygwin (see comment above)
dnl and neither can I find any authoritative answer for the correct link order
dnl for MacOSX or Linux, but 
dnl			-lXaw -lXmu -lXt -lXext -lX11
dnl seems to be the popular choice.
dnl (The previous order was -lX11 -lXt -lXext -lXmu -lXaw)

if test ! "$no_x" = "yes" ; then
	AC_CHECK_LIB(Xaw,main,X_LIBS="$X_LIBS -lXaw",AC_MSG_ERROR(Couldn't find Xaw library),$X_LIBS  $X_EXTRA_LIBS)
	AC_CHECK_LIB(Xmu,main,X_LIBS="$X_LIBS -lXmu",AC_MSG_ERROR(Couldn't find Xmu library), $X_LIBS $X_EXTRA_LIBS)
	X_LIBS="$X_LIBS -lXt"
	AC_CHECK_LIB(Xext, XShmAttach,X_LIBS="$X_LIBS -lXext",AC_MSG_ERROR(Couldn't find Xext library), $X_LIBS $X_EXTRA_LIBS)
	X_LIBS="$X_LIBS -lX11"

fi ;;

esac

dnl Define variables for YACC and LEX
AC_PROG_YACC
AM_PROG_LEX


dnl Check for a few typdefs:
AC_TYPE_PID_T
AC_TYPE_SIGNAL

dnl Check for a few libraries and headers:

AC_HEADER_DIRENT
AC_CHECK_HEADERS(ctype.h unistd.h pwd.h fcntl.h string.h)
AC_HEADER_SYS_WAIT
AC_HEADER_STAT

dnl Check time and resources headers and functions:
AC_HEADER_TIME
AC_STRUCT_TM
AC_STRUCT_TIMEZONE
AC_CHECK_FUNCS(localtime)

case $host_os in
  *cygwin* | *mingw* )
	AC_CHECK_FUNCS(ftime)
    AC_DEFINE(HAVE__MEMAVL,[],[Get system memory and time]);;
  * )
	AC_CHECK_FUNCS(gettimeofday time ftime , break)
	AC_CHECK_FUNCS(getrusage utimes, break)
	AC_CHECK_FUNCS(getrlimit ulimit, break);;
esac

dnl Look for termios first (posix)
AC_CHECK_HEADERS(termios.h termio.h sgtty.h , break)
AC_CHECK_FUNCS(isatty tcgetattr tcsetattr)

dnl Check for a few functions:
AC_FUNC_FORK([])
AC_CHECK_FUNCS(access bcopy qsort dup2 popen)
AC_CHECK_FUNCS(strchr index , break)
AC_CHECK_FUNCS(getcwd getwd , break)


AC_MSG_RESULT(Checking mathematical features of the system:)
dnl Look for math library:
AC_CHECK_LIB(m,sqrt)
AC_CHECK_HEADERS(float.h limits.h values.h)

dnl Check for a few mathematical functions:
AC_CHECK_FUNCS(erfc logb scalb scalbn asinh acosh atanh isnan)

dnl If user enables garbage collection, look for garbage collector
if test "$enable_gc" = "yes"; then
AC_MSG_RESULT(Checking for the presence of the Garbage Collector:)
AC_CHECK_LIB(gc,GC_malloc,
    AC_DEFINE(HAVE_LIBGC,[],[Define if we want garbage collection enabled ])
	LIBS="$LIBS -lgc")
fi

dnl check, if we have sigsetjmp and siglongjmp.
dnl A trivial AC_CHECK_FUNCS(sigsetjmp) won't do because sigsetjmp() might be a
dnl macro declared in <setjmp.h>. (joze)
AC_MSG_CHECKING(for sigsetjmp)
AC_TRY_LINK([#include <setjmp.h>],[jmp_buf env; sigsetjmp(env, 1);],
    [AC_MSG_RESULT(yes)
        AC_DEFINE(HAVE_SIGSETJMP,[],[Define if we have sigsetjmp().])],
    AC_MSG_RESULT(no) )

dnl Check for the asprintf function:
AC_CHECK_FUNCS(asprintf,,AC_CHECK_LIB(iberty,asprintf,AC_DEFINE(HAVE_ASPRINTF) LIBS="$LIBS -liberty"))

dnl Check for va_copy
AC_CACHE_CHECK([for va_copy], ac_cv_c_va_copy,
 AC_LINK_IFELSE([AC_LANG_PROGRAM([[#include <stdarg.h>]], [[va_list ap1, ap2;
    va_copy(ap1,ap2); 
   ]])],[ac_cv_c_va_copy="yes"],[ac_cv_c_va_copy="no"])
 )
if test "$ac_cv_c_va_copy" = "yes"
then 
    AC_DEFINE(HAVE_VA_COPY, 1, [Define if we have va_copy])
fi
AC_CACHE_CHECK([for __va_copy], ac_cv_c___va_copy,
 AC_LINK_IFELSE([AC_LANG_PROGRAM([[#include <stdarg.h>]], [[va_list ap1, ap2;
    __va_copy(ap1,ap2);
   ]])],[ac_cv_c___va_copy="yes"],[ac_cv_c___va_copy="no"])
 )
if test "$ac_cv_c___va_copy" = "yes"
then
    AC_DEFINE(HAVE___VA_COPY, 1, [Define if we have __va_copy])
fi

# AC_CHECK_FUNC(getopt_long, getopt_long=true)
# AM_CONDITIONAL(HAVE_GETOPT_LONG, test "$getopt_long" = "true")

# Expand the prefix variable (this is really annoying!)
if eval "test x$prefix = xNONE"; then
 dprefix=$ac_default_prefix
else
 dprefix=$prefix
fi


AC_DEFINE_UNQUOTED(NGSPICEBINDIR,
    "`echo $dprefix/bin`",
	[Define the directory for executables])
AC_DEFINE_UNQUOTED(NGSPICEDATADIR,
    "`echo $dprefix/share/ng-spice-rework`",
	[Define the directory for architecture independent data files] )
AC_DEFINE_UNQUOTED(NGSPICEBUILDDATE,
    "`date`",
	[Define the build date])

# Recapitulate settings:
AC_MSG_RESULT(Settings which were chosen:)

dnl  with the MS WINDOWS executable we suggest /spice_win/bin as *.exe-path
if test "$with_windows" = "yes"; then
dnl redefine the path for WINDOWS:
    AC_MSG_RESULT(WINDOWS code enabled)
    AC_DEFINE_UNQUOTED(NGSPICEBINDIR, "`echo /spice_win/bin`" )
    AC_DEFINE_UNQUOTED(NGSPICEDATADIR, "`echo /spice_win/lib`" )
    WINMAIN="winmain.o"
    WINDISPLIB="frontend/wdisp/libwindisp.a"
else
    WINMAIN=""
    WINDISPLIB=""
fi

AC_SUBST(WINMAIN)
AC_SUBST(WINDISPLIB)

if test "$enable_sense2" = "yes"; then
	AC_DEFINE(WANT_SENSE2,[],[Define if we want spice2 sensitivity analysis])
	AC_MSG_RESULT(Spice2 sensitivity analysis enabled)	
fi
if test "$enable_nobypass" = "yes"; then
	AC_DEFINE(NOBYPASS,[],[Define if we want NOBYPASS])
	AC_MSG_RESULT(NOBYPASS option enabled)	
fi
if test "$enable_nosqrt" = "yes"; then
    AC_DEFINE(NOSQRT,[],[Define to use always exp/log for bulk diode calculations in mosfetf])
    AC_MSG_RESULT(NOSQRT option enabled)	
fi 
if test "$enable_capbypass" = "yes"; then
    AC_DEFINE(CAPBYPASS,[],[Define if we want to bypass cbd/cbs calculation for non varying vbs/vbd])
    AC_MSG_RESULT(CAPBYPASS option enabled)	
fi 
if test "$enable_capzerobypass" = "yes"; then
    AC_DEFINE(CAPZEROBYPASS,[],[Define if we want to bypass cbd/cbs calculation if Czero is zero])
    AC_MSG_RESULT(CAPZEROBYPASS option enabled)	
fi
if test "$enable_nodelimiting" = "yes"; then
    AC_DEFINE(NODELIMITING,[],[Experimental code never implemented to damp Newton iterations])
    AC_MSG_RESULT(NODELIMITING option enabled)	
fi 
if test "$enable_predictor" = "yes"; then
	AC_DEFINE(PREDICTOR,[],[Define if we want predictor algorithm])
	AC_MSG_RESULT(PREDICTOR algorithm enabled)	
fi
if test "$enable_newpred" = "yes"; then
	AC_DEFINE(NEWPRED,[],[Define if you want to discover :)])
	AC_MSG_RESULT(NEWPRED enabled)	
fi
if test "$enable_newtrunc" = "yes"; then
    AC_DEFINE(NEWTRUNC,[],[Do not trigger unwanted traps by default])
    AC_MSG_RESULT(New truncation error calculation enabled)
fi 
if test "$enable_intnoise" = "yes"; then
	AC_DEFINE(INT_NOISE,[],[Define if we want noise integration code])
	AC_MSG_RESULT(Noise integration enabled)
fi
if test "$enable_experimental" = "yes"; then
	AC_DEFINE(EXPERIMENTAL_CODE,[],[Define if we want some experimental code])
	AC_MSG_RESULT(EXPERIMENTAL_CODE enabled)	
fi
if test "$enable_cpdebug" = "yes"; then
	AC_DEFINE(CPDEBUG,[],[Define if you want to debug ngspice shell])
	AC_MSG_RESULT(WARNING: Shell debug is enabled)	
fi
if test "$enable_ftedebug" = "yes"; then
	AC_DEFINE(FTEDEBUG,[],[Define if you want to debug frontend])
	AC_MSG_RESULT(WARNING: Frontend debug is enabled)	
fi
if test "$enable_sensdebug" = "yes"; then
    AC_DEFINE(SENSDEBUG,[],[Define if we want debug sensititvity analysis])
    AC_MSG_RESULT(WARNING: Sensitivity code debug *SENSDEBUG* is enabled)	
fi
if test "$enable_asdebug" = "yes"; then
    AC_DEFINE(ASDEBUG,[],[Define if we want debug sensitivity analysis])
    AC_MSG_RESULT(WARNING: Sensitivity code debug *ASDEBUG* is enabled)	
fi
if test "$enable_stepdebug" = "yes"; then
    AC_DEFINE(STEPDEBUG,[],[Define if we want stepdebug])
    AC_MSG_RESULT(WARNING: STEPDEBUG debug is enabled)	
fi
if test "$enable_pzdebug" = "yes"; then
    AC_DEFINE(PZDEBUG,[],[Define if you want to debug pole-zero analysis])
    AC_MSG_RESULT(WARNING: Pole/Zero analysis debug is enabled)	
fi
if test "$enable_blktmsdebug" = "yes"; then
    AC_DEFINE(D_DBG_BLOCKTIMES,[],[Define if we want debug distortion analysis (BLOCKTIMES)])
    AC_MSG_RESULT(WARNING: Distortion analysis debug *D_DBG_BLOCKTIMES* is enabled)	
fi
if test "$enable_smltmsdebug" = "yes"; then
    AC_DEFINE(D_DBG_SMALLTIMES,[],[Define if we want debug distortion analysis (SMALLTIMES)])
    AC_MSG_RESULT(WARNING: Distortion analysis debug *D_DBG_SMALLTIMES* is enabled)	
fi
if test "$enable_xgraph" = "yes"; then
    AC_MSG_RESULT(Xgraph compilation enabled.)
    AC_CONFIG_SUBDIRS(xgraph)
    XGRAPHDIR="xgraph"
    NOTXGRAPH=""
else
    XGRAPHDIR=""
    NOTXGRAPH="xgraph"
fi        

AC_SUBST(XGRAPHDIR)
AC_SUBST(NOTXGRAPH)

if test "$enable_ekv" = "yes"; then
    AC_MSG_RESULT(Model EKV included)
    AC_DEFINE(HAVE_EKV,[],[Define HAVE_EKV when you wank the EVK library (not included in the standard distribution)])
    EKVDIR="ekv"
    EKVLIB="spicelib/devices/ekv/libekv.la"
else
    EKVDIR=""
    EKVLIB=""	
fi

AC_SUBST(EKVDIR)
AC_SUBST(EKVLIB)


dnl Add new code models to the build by pointing to them here.
if test "$enable_xspice" = "yes"; then
    AC_MSG_RESULT(X-Spice features included)
    AC_DEFINE(XSPICE,[],[The xspice enhancements])
    XSPICEDIR="xspice"
    case $host_os in
     *mingw* | *cygwin* )
      DLLIBS="";;
     * )
      DLLIBS="-ldl";;
    esac   
    XSPICELIB1="$XSPICEDIR/cm/libcmxsp.a \
    		$XSPICEDIR/mif/libmifxsp.a"
    XSPICELIB2="$XSPICEDIR/evt/libevtxsp.a \
                $XSPICEDIR/enh/libenhxsp.a \
	        $XSPICEDIR/ipc/libipcxsp.a \
		$XSPICEDIR/idn/libidnxsp.a \
		$DLLIBS"
    XSPICEINIT=""    
    XSPICETESTS=""		
		

else
    XSPCIEDIR=""
    XSPICELIB1=""
    XSPICELIB2=""
    XSPICETESTS=""
    XSPICEINIT="*"
fi
AC_SUBST(XSPICEDIR)
AC_SUBST(XSPICELIB1)
AC_SUBST(XSPICELIB2)
AC_SUBST(XSPICETESTS)
AC_SUBST(XSPICEINIT)

dnl Add CIDER enhancements to ngspice.
if test "$enable_cider" = "yes"; then
     AC_MSG_RESULT(CIDER features enabled)
     AC_DEFINE(CIDER,[],[The CIDER enhancements])
     
     CIDERDIR="ciderlib"
     
     CIDERSIM="	$CIDERDIR/twod/libcidertwod.a     \
		$CIDERDIR/oned/libcideroned.a     \
		$CIDERDIR/input/libciderinput.a   \
		$CIDERDIR/support/libcidersuprt.a"
     
     CIDERMATH="misc"
     
     CIDERMATHDIR="maths/misc/libmathmisc.a"
     
     NUMDEV="	spicelib/devices/nbjt/libnbjt.a   \
		spicelib/devices/nbjt2/libnbjt2.a \
		spicelib/devices/numd/libnumd.a   \
		spicelib/devices/numd2/libnumd2.a \
		spicelib/devices/numos/libnumos.a"
     NUMDEVDIR="  nbjt \
   		nbjt2 \
		numd  \
		numd2 \
		numos"
		   
CIDERSCRIPTS="devload devaxis ciderinit"
   
else
   CIDERLIB=""
   CIDERSIM=""
   CIDERMATH=""
   CIDERMATHDIR=""
   NUMDEV=""
   NUMDEVDIR=""
   CIDERSCRIPTS=""
fi
AC_SUBST(CIDERDIR)
AC_SUBST(CIDERSIM)
AC_SUBST(CIDERMATH)
AC_SUBST(CIDERMATHDIR)
AC_SUBST(NUMDEV) 
AC_SUBST(NUMDEVDIR)
AC_SUBST(CIDERSCRIPTS)

dnl Cluster option
if test "$enable_cluster" = "yes"; then
   AC_MSG_RESULT(Cluster version is being compiled)
   AC_DEFINE(CLUSTER,[],[Spice cluster support ])
   LIBS="$LIBS -lpthread"   
fi

if test "$enable_expdevices" = "yes"; then
	AC_DEFINE(EXP_DEV,[],[Define if we want to enable experimental devices])
	AC_MSG_RESULT(WARNING: Experimental devices enabled)	
fi

if test "$enable_numparam" = "yes"; then
    AC_MSG_RESULT(Numparam library is enabled)
    AC_DEFINE(NUMPARAMS,[],[Spice .param support])
    NUMPARAMDIR="numparam"
    NUMPARAMLIB="frontend/numparam/libnumparam.a"
else
    NUMPARAMDIR=""
    NUMPARAMLIB=""	
fi
AC_SUBST(NUMPARAMDIR)
AC_SUBST(NUMPARAMLIB)


dnl  ----  Option to include GNU readline support in ngspice CLI  ----
dnl  ----  Default: disabled.                                     ----
dnl  ----  Hope to see in the future readline replacement.        ----

if test "$with_readline" != "yes"; then
    AC_MSG_RESULT(GNU readline disabled.)
else 
    AC_MSG_RESULT(Checking for readline:)
    AC_CHECK_HEADERS([readline/readline.h readline/history.h], 
                     [AC_DEFINE(HAVE_GNUREADLINE,[],[Define if we have GNU readline])],
                     [AC_MSG_ERROR(Couldn't find GNU readline headers.)])
    AC_SEARCH_LIBS(tputs,ncurses termcap,
                     AC_DEFINE(HAVE_TERMCAP,[],[Define if we have ncurses or termcap]),
                     AC_MSG_ERROR(Found neither ncurses or termcap))
    AC_CHECK_LIB(readline, readline, 
                     [LIBS="$LIBS -lreadline"],
                     [AC_MSG_ERROR(Couldn't find readline libraries.)])	       
fi


dnl  ----  Option to include BSD editline support in ngspice CLI  ----
dnl  ----  Default: disabled.                                     ----

if test "$with_editline" != "yes"; then
    AC_MSG_RESULT(BSD editline disabled.)
else 
    AC_MSG_RESULT(Checking for editline:)
    AC_CHECK_HEADERS([editline/readline.h], 
                     [AC_DEFINE([HAVE_BSDEDITLINE],[1],[Define to enable BSD editline])],
                     [AC_MSG_ERROR(Couldn't find BSD editline headers.)])
    AC_SEARCH_LIBS(tputs,ncurses termcap,
                     AC_DEFINE(HAVE_TERMCAP,[],[Define if we have ncurses or termcap]),
                     AC_MSG_ERROR(Found neither ncurses or termcap))
    AC_CHECK_LIB(edit, readline, 
                     [LIBS="$LIBS -ledit"],
                     [AC_MSG_ERROR(Couldn't find editline libraries.)],
                     -lncurses )	       
fi


dnl Output Files
dnl ------------

AC_CONFIG_FILES([\
Makefile			\
doc/Makefile			\
man/Makefile			\
man/man1/Makefile		\
src/Makefile			\
src/spinit			\
src/spicelib/Makefile		\
src/spicelib/analysis/Makefile	\
src/spicelib/devices/Makefile		\
src/spicelib/devices/asrc/Makefile	\
src/spicelib/devices/bjt/Makefile	\
src/spicelib/devices/bjt2/Makefile	\
src/spicelib/devices/bsim1/Makefile	\
src/spicelib/devices/bsim2/Makefile	\
src/spicelib/devices/bsim3v0/Makefile	\
src/spicelib/devices/bsim3v1/Makefile	\
src/spicelib/devices/bsim3v1a/Makefile	\
src/spicelib/devices/bsim3v1s/Makefile	\
src/spicelib/devices/bsim3/Makefile	\
src/spicelib/devices/bsim4/Makefile	\
src/spicelib/devices/bsim3soi/Makefile	\
src/spicelib/devices/bsim3soi_pd/Makefile \
src/spicelib/devices/bsim3soi_fd/Makefile \
src/spicelib/devices/bsim3soi_dd/Makefile \
src/spicelib/devices/cap/Makefile	\
src/spicelib/devices/cccs/Makefile	\
src/spicelib/devices/ccvs/Makefile	\
src/spicelib/devices/csw/Makefile	\
src/spicelib/devices/cpl/Makefile       \
src/spicelib/devices/dio/Makefile	\
src/spicelib/devices/ind/Makefile	\
src/spicelib/devices/isrc/Makefile	\
src/spicelib/devices/hfet1/Makefile	\
src/spicelib/devices/hfet2/Makefile	\
src/spicelib/devices/hisim/Makefile	\
src/spicelib/devices/jfet/Makefile	\
src/spicelib/devices/jfet2/Makefile	\
src/spicelib/devices/ltra/Makefile	\
src/spicelib/devices/mes/Makefile	\
src/spicelib/devices/mesa/Makefile      \
src/spicelib/devices/mos1/Makefile	\
src/spicelib/devices/mos2/Makefile	\
src/spicelib/devices/mos3/Makefile	\
src/spicelib/devices/mos6/Makefile	\
src/spicelib/devices/mos9/Makefile	\
src/spicelib/devices/res/Makefile	\
src/spicelib/devices/soi3/Makefile	\
src/spicelib/devices/sw/Makefile	\
src/spicelib/devices/tra/Makefile	\
src/spicelib/devices/txl/Makefile       \
src/spicelib/devices/urc/Makefile	\
src/spicelib/devices/vbic/Makefile      \
src/spicelib/devices/vccs/Makefile	\
src/spicelib/devices/vcvs/Makefile	\
src/spicelib/devices/vsrc/Makefile	\
src/spicelib/devices/nbjt/Makefile	\
src/spicelib/devices/nbjt2/Makefile	\
src/spicelib/devices/numd/Makefile	\
src/spicelib/devices/numd2/Makefile	\
src/spicelib/devices/numos/Makefile	\
src/spicelib/parser/Makefile		\
src/ciderlib/Makefile			\
src/ciderlib/input/Makefile		\
src/ciderlib/support/Makefile		\
src/ciderlib/oned/Makefile		\
src/ciderlib/twod/Makefile		\
src/frontend/Makefile			\
src/frontend/numparam/Makefile		\
src/frontend/help/Makefile		\
src/frontend/parser/Makefile		\
src/frontend/plotting/Makefile		\
src/frontend/wdisp/Makefile		\
src/include/Makefile			\
src/maths/Makefile			\
src/maths/cmaths/Makefile		\
src/maths/misc/Makefile			\
src/maths/ni/Makefile			\
src/maths/deriv/Makefile		\
src/maths/poly/Makefile			\
src/maths/sparse/Makefile		\
src/misc/Makefile			\
src/xspice/Makefile			\
src/xspice/cm/Makefile			\
src/xspice/cmpp/Makefile		\
src/xspice/icm/makedefs			\
src/xspice/mif/Makefile			\
src/xspice/evt/Makefile			\
src/xspice/enh/Makefile			\
src/xspice/ipc/Makefile			\
src/xspice/idn/Makefile			\
tests/Makefile				\
tests/bsim1/Makefile			\
tests/bsim2/Makefile			\
tests/bsim3/Makefile			\
tests/bsim3/Berkeley/Makefile		\
tests/bsim3/Berkeley/3v0/Makefile	\
tests/bsim3/Berkeley/3v0/ac_sim/Makefile	\
tests/bsim3/Berkeley/3v0/dc_sim/Makefile	\
tests/bsim3/Berkeley/3v0/tran_sim/Makefile	\
tests/bsim3/Berkeley/3v1/Makefile		\
tests/bsim3/Berkeley/3v1/ac_sim/Makefile	\
tests/bsim3/Berkeley/3v1/dc_sim/Makefile	\
tests/bsim3/Berkeley/3v1/tran_sim/Makefile	\
tests/bsim3/Berkeley/3v2/Makefile		\
tests/bsim3/Berkeley/3v2/ac_sim/Makefile	\
tests/bsim3/Berkeley/3v2/dc_sim/Makefile	\
tests/bsim3/Berkeley/3v2/tran_sim/Makefile	\
tests/bsim3soidd/Makefile		\
tests/bsim3soifd/Makefile		\
tests/bsim3soipd/Makefile		\
tests/bsim4/Makefile			\
tests/filters/Makefile			\
tests/general/Makefile			\
tests/hfet/Makefile			\
tests/hisim/Makefile			\
tests/jfet/Makefile			\
tests/mes/Makefile			\
tests/mesa/Makefile			\
tests/mos6/Makefile			\
tests/polezero/Makefile			\
tests/sensitivity/Makefile		\
tests/transient/Makefile		\
tests/transmission/Makefile		\
tests/resistance/Makefile		\
tests/vbic/Makefile
])
AC_OUTPUT
